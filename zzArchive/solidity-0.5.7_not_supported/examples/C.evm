    /* "C.sol":25:156  contract C {... */
  mstore(0x40, 0x80)
  callvalue
    /* "--CODEGEN--":8:17   */
  dup1
    /* "--CODEGEN--":5:7   */
  iszero
  tag_1
  jumpi
    /* "--CODEGEN--":30:31   */
  0x00
    /* "--CODEGEN--":27:28   */
  dup1
    /* "--CODEGEN--":20:32   */
  revert
    /* "--CODEGEN--":5:7   */
tag_1:
    /* "C.sol":25:156  contract C {... */
  pop
  dataSize(sub_0)
  dup1
  dataOffset(sub_0)
  0x00
  codecopy
  0x00
  return
stop

sub_0: assembly {
        /* "C.sol":25:156  contract C {... */
      mstore(0x40, 0x80)
      callvalue
        /* "--CODEGEN--":8:17   */
      dup1
        /* "--CODEGEN--":5:7   */
      iszero
      tag_1
      jumpi
        /* "--CODEGEN--":30:31   */
      0x00
        /* "--CODEGEN--":27:28   */
      dup1
        /* "--CODEGEN--":20:32   */
      revert
        /* "--CODEGEN--":5:7   */
    tag_1:
        /* "C.sol":25:156  contract C {... */
      pop
      jumpi(tag_2, lt(calldatasize, 0x04))
      shr(0xe0, calldataload(0x00))
      dup1
      0xb3de648b
      eq
      tag_3
      jumpi
    tag_2:
      0x00
      dup1
      revert
        /* "C.sol":40:154  function f(uint x) public pure returns (uint y) {... */
    tag_3:
      tag_4
      0x04
      dup1
      calldatasize
      sub
        /* "--CODEGEN--":13:15   */
      0x20
        /* "--CODEGEN--":8:11   */
      dup2
        /* "--CODEGEN--":5:16   */
      lt
        /* "--CODEGEN--":2:4   */
      iszero
      tag_5
      jumpi
        /* "--CODEGEN--":29:30   */
      0x00
        /* "--CODEGEN--":26:27   */
      dup1
        /* "--CODEGEN--":19:31   */
      revert
        /* "--CODEGEN--":2:4   */
    tag_5:
        /* "C.sol":40:154  function f(uint x) public pure returns (uint y) {... */
      dup2
      add
      swap1
      dup1
      dup1
      calldataload
      swap1
      0x20
      add
      swap1
      swap3
      swap2
      swap1
      pop
      pop
      pop
      tag_6
      jump	// in
    tag_4:
      mload(0x40)
      dup1
      dup3
      dup2
      mstore
      0x20
      add
      swap2
      pop
      pop
      mload(0x40)
      dup1
      swap2
      sub
      swap1
      return
    tag_6:
        /* "C.sol":80:86  uint y */
      0x00
        /* "C.sol":98:99  1 */
      0x01
        /* "C.sol":94:99  y = 1 */
      swap1
      pop
        /* "C.sol":110:116  uint i */
      0x00
        /* "C.sol":119:120  0 */
      dup1
        /* "C.sol":110:120  uint i = 0 */
      swap1
      pop
        /* "C.sol":105:149  for (uint i = 0; i < x; i++)... */
    tag_8:
        /* "C.sol":126:127  x */
      dup3
        /* "C.sol":122:123  i */
      dup2
        /* "C.sol":122:127  i < x */
      lt
        /* "C.sol":105:149  for (uint i = 0; i < x; i++)... */
      iszero
      tag_9
      jumpi
        /* "C.sol":148:149  y */
      dup2
        /* "C.sol":144:145  2 */
      0x02
        /* "C.sol":144:149  2 * y */
      mul
        /* "C.sol":140:149  y = 2 * y */
      swap2
      pop
        /* "C.sol":129:132  i++ */
      dup1
      dup1
      0x01
      add
      swap2
      pop
      pop
        /* "C.sol":105:149  for (uint i = 0; i < x; i++)... */
      jump(tag_8)
    tag_9:
      pop
        /* "C.sol":40:154  function f(uint x) public pure returns (uint y) {... */
      swap2
      swap1
      pop
      jump	// out

    auxdata: 0xa165627a7a72305820c0099372b741df4ad9a78ece38574439f74063379683ad981a16a06c7618a3c20029
}
